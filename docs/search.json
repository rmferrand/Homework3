[
  {
    "objectID": "functionflow.html",
    "href": "functionflow.html",
    "title": "Functions and Flow Logic",
    "section": "",
    "text": "Purpose: This program seeks to complete the exercises listed in Homework 3, for ST558. The exercises primarily consist of looping and writing basic functions in R. Code chunks will be explained and the processes will be outlined."
  },
  {
    "objectID": "functionflow.html#task-1-control-flow-practice",
    "href": "functionflow.html#task-1-control-flow-practice",
    "title": "Functions and Flow Logic",
    "section": "Task 1: Control Flow Practice",
    "text": "Task 1: Control Flow Practice\nFirst, load in the data.\n\nload(\"hw2_list.rda\")\n\nNext, create a new column in each dataframe called status using character function.\n\nbp_list$treatment$status &lt;- character(20)\nbp_list$placebo$status &lt;- character(10)\n\nFor the following two code chunks, we used the following logic. A simple for loop is conducted with the seq_along function to go through 20, or 10 times for treatment or placebo, respectively. With these repeated runs, we are using if statements to determine if the post bp is in one of the following conditions: &lt;=120, 120&lt;bp&lt;=130, or &gt;130. We are then assigning the appropriate categorical status variable: optimal, borderline, or high respectively. This is completed for both treatment and control groups.\nFor the treatment group:\n\nfor (x in seq_along(bp_list$treatment$status)) {\n    if (bp_list$treatment$post_bp[x] &lt;= 120) {\n        bp_list$treatment$status[x] = \"optimal\"\n      }\n    else if (120 &lt; bp_list$treatment$post_bp[x] & \n             bp_list$treatment$post_bp[x] &lt;= 130) {\n        bp_list$treatment$status[x] = \"borderline\"\n      }\n    else if (bp_list$treatment$post_bp[x] &gt;= 130) {\n        bp_list$treatment$status[x] = \"high\"\n      }\n  }\n\nprint(bp_list$treatment)\n\n              patient pre_bp post_bp diff_bp normal     status\nSubject_1   Subject_1    120     127      -7  FALSE borderline\nSubject_2   Subject_2    151     145       6  FALSE       high\nSubject_3   Subject_3    125     135     -10  FALSE       high\nSubject_4   Subject_4    126     122       4  FALSE borderline\nSubject_5   Subject_5    115     115       0   TRUE    optimal\nSubject_6   Subject_6    132     122      10  FALSE borderline\nSubject_7   Subject_7    132     123       9  FALSE borderline\nSubject_8   Subject_8    129     126       3  FALSE borderline\nSubject_9   Subject_9    134     126       8  FALSE borderline\nSubject_10 Subject_10    139     129      10  FALSE borderline\nSubject_11 Subject_11    127     132      -5  FALSE       high\nSubject_12 Subject_12    122     146     -24  FALSE       high\nSubject_13 Subject_13    127     120       7  FALSE    optimal\nSubject_14 Subject_14    135     114      21   TRUE    optimal\nSubject_15 Subject_15    133     121      12  FALSE borderline\nSubject_16 Subject_16    128     120       8  FALSE    optimal\nSubject_17 Subject_17    147     128      19  FALSE borderline\nSubject_18 Subject_18    138     120      18  FALSE    optimal\nSubject_19 Subject_19    140     133       7  FALSE       high\nSubject_20 Subject_20    132     115      17   TRUE    optimal\n\n\nFor the placebo group:\n\nfor (x in seq_along(bp_list$placebo$status)) \n  {\n    if (bp_list$placebo$post_bp[x] &lt;= 120) {\n        bp_list$placebo$status[x] = \"optimal\"\n      }\n    else if (120 &lt; bp_list$placebo$post_bp[x] & \n             bp_list$placebo$post_bp[x] &lt;= 130) {\n        bp_list$placebo$status[x] = \"borderline\"\n      }\n    else if (bp_list$placebo$post_bp[x] &gt;= 130) {\n        bp_list$placebo$status[x] = \"high\"\n      }\n  }\n\nprint(bp_list$placebo)\n\n      patient pre_bp post_bp diff_bp normal     status\n1   Subject_1    138     105      33   TRUE    optimal\n2   Subject_2    135     136      -1  FALSE       high\n3   Subject_3    147     123      24  FALSE borderline\n4   Subject_4    117     130     -13  FALSE borderline\n5   Subject_5    152     134      18  FALSE       high\n6   Subject_6    134     143      -9  FALSE       high\n7   Subject_7    114     135     -21  FALSE       high\n8   Subject_8    121     139     -18  FALSE       high\n9   Subject_9    131     120      11  FALSE    optimal\n10 Subject_10    130     124       6  FALSE borderline"
  },
  {
    "objectID": "functionflow.html#task-2-function-writing",
    "href": "functionflow.html#task-2-function-writing",
    "title": "Functions and Flow Logic",
    "section": "Task 2: Function Writing",
    "text": "Task 2: Function Writing\nDr. Post said that either a dataframe or a named list would be appropriate here (as per the discussion board). I have done both just because the framing of “I’m going to let you consider what to do” and “meaningful names” made me feel uneasy.\nIn both cases, the following were honored: taking in a list with two dataframes in it. Taking in an R function summary_func that has default value set to “mean”. Finds the statistic of interest depending on input from summary_func and the get function. Both named list and dataframe return meaningful names.\n\nNamed List:\nFirst, I created a function that takes in the list and defaults another summary function to mean. Using the get function, we can directly take the value of what we need and reapply to each column of the respective treatment or placebo dataframe. Using lapply to output as a list, and sapply to output as a vector, we obtain the respective summary statistics to for each column. Using the names function, we assign it to the result to create a named list which is separated into placebo vs treatment, and then the dynamic summary statistic for each pre_bp, post_bp, and diff_bp is appended.\n\nsum_funcNL &lt;- function(df_list, summary_func = \"mean\") {\n  sum_stat &lt;- get(summary_func)\n  result_list &lt;- lapply(df_list, function(df) {\n    calcstat &lt;- sapply(df[c(\"pre_bp\", \"post_bp\", \"diff_bp\")], sum_stat)\n    names(calcstat) &lt;- paste(names(calcstat), summary_func, sep = \"_\")\n    return(calcstat)\n  })\n  return(result_list)\n}\n\nLet’s test! Notice I am using a for loop to output all 6 possible summary statistics, with the first one being the default mean as captured in the if statement, and the other 5 being run through in a list format. This should give us our 6 separate named list outputs.\n\nfor (x in list(NULL, \"var\", \"sd\", \"min\", \"max\")) {\n    if (is.null(x)) {\n        print(sum_funcNL(bp_list))\n      }\n    else  {\n        print(sum_funcNL(bp_list, x)) \n      }\n  }\n\n$treatment\n pre_bp_mean post_bp_mean diff_bp_mean \n      131.60       125.95         5.65 \n\n$placebo\n pre_bp_mean post_bp_mean diff_bp_mean \n       131.9        128.9          3.0 \n\n$treatment\n pre_bp_var post_bp_var diff_bp_var \n   75.72632    78.99737   117.81842 \n\n$placebo\n pre_bp_var post_bp_var diff_bp_var \n   149.8778    124.9889    341.3333 \n\n$treatment\n pre_bp_sd post_bp_sd diff_bp_sd \n  8.702087   8.888046  10.854419 \n\n$placebo\n pre_bp_sd post_bp_sd diff_bp_sd \n  12.24246   11.17984   18.47521 \n\n$treatment\n pre_bp_min post_bp_min diff_bp_min \n        115         114         -24 \n\n$placebo\n pre_bp_min post_bp_min diff_bp_min \n        114         105         -21 \n\n$treatment\n pre_bp_max post_bp_max diff_bp_max \n        151         146          21 \n\n$placebo\n pre_bp_max post_bp_max diff_bp_max \n        152         143          33 \n\n\n\n\nDataframe:\nIn this case, the logic is similar up until the do.call function. To create a dataframe, we are using do.call with rbind and the same lapply, sapply logic to create the row-bound dataframe this time instead of a named list. Keep in mind, the dynamic summary statistic is also applied. Now we apply sum_stat to the columns pre_bp, post_bp, diff_bp in the current dataframe which is simplified into a vector using sapply. The names are then applied same as before, and we have to transpose the results vector so that we can use the row.names function which depends on treatment vs placebo. Note, I was also able to simplify not returning calcstat.\n\nsum_funcDF &lt;- function(df_list, summary_func = \"mean\") {\n  sum_stat &lt;- get(summary_func)\n  result_df &lt;- do.call(rbind, lapply(names(df_list), function(name) {\n    calcstat &lt;- sapply(df_list[[name]][c(\"pre_bp\", \"post_bp\", \"diff_bp\")], sum_stat)\n    names(calcstat) &lt;- paste(names(calcstat), summary_func, sep = \"_\")\n    as.data.frame(t(calcstat), row.names = name)\n  }))\n  return(result_df)\n}\n\nLet’s test! Same logic as before. 6 dataframes with meaningful names.\n\nfor (x in list(NULL, \"var\", \"sd\", \"min\", \"max\")) {\n    if (is.null(x)) {\n        print(sum_funcDF(bp_list))\n      }\n    else  {\n        print(sum_funcDF(bp_list, x)) \n      }\n  }\n\n          pre_bp_mean post_bp_mean diff_bp_mean\ntreatment       131.6       125.95         5.65\nplacebo         131.9       128.90         3.00\n          pre_bp_var post_bp_var diff_bp_var\ntreatment   75.72632    78.99737    117.8184\nplacebo    149.87778   124.98889    341.3333\n          pre_bp_sd post_bp_sd diff_bp_sd\ntreatment  8.702087   8.888046   10.85442\nplacebo   12.242458  11.179843   18.47521\n          pre_bp_min post_bp_min diff_bp_min\ntreatment        115         114         -24\nplacebo          114         105         -21\n          pre_bp_max post_bp_max diff_bp_max\ntreatment        151         146          21\nplacebo          152         143          33"
  }
]